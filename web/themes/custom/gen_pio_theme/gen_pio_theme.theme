<?php

/**
 * Implements hook_preprocess_page().
 */
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\Core\DrupalKernel;
use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
use Drupal\Core\Routing\RouteMatchInterface;
function gen_pio_theme_preprocess_page(&$variables) {
    
    // Check if the current route is the front page
    if (\Drupal::routeMatch()->getRouteName() == 'view.frontpage.page_1') {
        \Drupal::logger('gen_pio_theme')->notice('Preprocess function triggered.');

        // Fetch the latest published node of type "image_carousel"
        $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
        $nids = $query->condition('type', 'image_carousel')
            ->condition('status', 1)
            ->sort('created', 'DESC')
            ->range(0, 1)
            ->accessCheck(TRUE)
            ->execute();

        if (!empty($nids)) {
            $nid = reset($nids);
            $node = \Drupal\node\Entity\Node::load($nid);
            if ($node) {
                $variables['node'] = $node;
            }
        }

        // Fetch the latest 4 published news articles
        $news_nids = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
            ->condition('type', 'news_content') // Ensure your news content type is correct
            ->condition('status', 1)
            ->sort('field_news_date', 'DESC')
            ->range(0, 1) // Fetch the latest 4 news articles
            ->accessCheck(TRUE)
            ->execute();

        $variables['latest_news'] = !empty($news_nids) ? \Drupal\node\Entity\Node::loadMultiple($news_nids) : [];

        $news_all = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
        ->condition('type', 'news_content') // Ensure your news content type is correct
        ->condition('status', 1)
        ->sort('field_news_date', 'DESC')
        ->accessCheck(TRUE)
        ->execute();

        $variables['latest_news_all'] = !empty($news_all) ? \Drupal\node\Entity\Node::loadMultiple($news_all) : [];

        // Fetch the latest 4 published events
        $events_nids = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
            ->condition('type', 'events_contents') // Ensure your events content type is correct
            ->condition('status', 1)
            ->sort('field_events_date', 'DESC')
            ->range(0, 3) // Fetch the latest 4 events
            ->accessCheck(TRUE)
            ->execute();

        $variables['latest_events'] = !empty($events_nids) ? \Drupal\node\Entity\Node::loadMultiple($events_nids) : [];

      
    }else{
         // Fetch the latest 4 published news articles
         $news_nids = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
         ->condition('type', 'news_content') // Ensure your news content type is correct
         ->condition('status', 1)
         ->sort('field_news_date', 'DESC')
         ->accessCheck(TRUE)
         ->execute();

        $variables['latest_news_all'] = !empty($news_nids) ? \Drupal\node\Entity\Node::loadMultiple($news_nids) : [];

        $events_nids = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
        ->condition('type', 'events_contents') // Ensure your news content type is correct
        ->condition('status', 1)
        ->sort('field_events_date', 'DESC')
        ->accessCheck(TRUE)
        ->execute();

       $variables['latest_events_all'] = !empty($events_nids) ? \Drupal\node\Entity\Node::loadMultiple($events_nids) : [];

       $officials_nids = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
        ->condition('type', 'barangay_official')
        ->condition('status', 1)
        ->accessCheck(TRUE)
        ->execute();

        $officials = [];

        if (!empty($officials_nids)) {
            $nodes = Node::loadMultiple($officials_nids);
            $file_url_generator = \Drupal::service('file_url_generator'); // Properly load the service

            foreach ($nodes as $node) {
                $image_url = '';

                if ($node->hasField('field_image_of_official') && !$node->get('field_image_of_official')->isEmpty()) {
                    $image_entity = $node->get('field_image_of_official')->entity;
                    if ($image_entity instanceof File) {
                        $image_url = $file_url_generator->generateAbsoluteString($image_entity->getFileUri());
                    }
                }

                $officials[] = [
                    'label' => $node->getTitle(),
                    'position' => $node->get('field_position')->value ?? '',
                    'image' => $image_url,
                ];
            }
        }

        $variables['officials'] = $officials;

        $SKofficials_nids = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
        ->condition('type', 'sk_officials')
        ->condition('status', 1)
        ->accessCheck(TRUE)
        ->execute();

        $SKofficials = [];

        if (!empty($SKofficials_nids)) {
            $nodes = Node::loadMultiple($SKofficials_nids);
            $file_url_generator = \Drupal::service('file_url_generator'); // Properly load the service

            foreach ($nodes as $node) {
                $image_url_sk = '';

                if ($node->hasField('field_sk_image') && !$node->get('field_sk_image')->isEmpty()) {
                    $image_entity = $node->get('field_sk_image')->entity;
                    if ($image_entity instanceof File) {
                        $image_url_sk = $file_url_generator->generateAbsoluteString($image_entity->getFileUri());
                    }
                }

                $SKofficials[] = [
                    'label' => $node->getTitle(),
                    'position' => $node->get('field_sk_position')->value ?? '',
                    'image' => $image_url_sk,
                ];
            }
        }

        $variables['sk_officials'] = $SKofficials;
        
    }
    // Initialize the array
$variables['latest_news_content'] = [];
// Retrieve the node ID from the route
$id = \Drupal::routeMatch()->getParameter('id'); // Get the ID from the route
// Ensure ID is an integer
if (!is_numeric($id)) {
    \Drupal::logger('gen_pio')->debug('Invalid ID: @id', ['@id' => $id]);
    return; // Stop processing if the ID is invalid
}
// Debugging: Log the retrieved ID
//\Drupal::logger('gen_pio')->debug('Fixed Retrieved News ID: @id', ['@id' => $id]);
if (!empty($news_nids) && $id) {
    // Debugging: Check if ID exists in news_nids
    \Drupal::logger('gen_pio')->debug('Available News IDs: @ids', ['@ids' => implode(',', $news_nids)]);
    // Load the nodes
    $nodes = \Drupal\node\Entity\Node::loadMultiple($news_nids);
    foreach ($nodes as $node) {
        // Debugging: Log the current node ID
        \Drupal::logger('gen_pio')->debug('Checking Node ID: @node_id', ['@node_id' => $node->id()]);
        // Only process the node that matches the requested ID
        if ($node->id() == $id) {
           // \Drupal::logger('gen_pio')->debug('Matching News Found: @id', ['@id' => $id]);
            $variables['latest_news_content'][] = [
                'id' => $node->id(),
                'label' => $node->getTitle(),
                'date' => $node->get('field_news_date')->value ?? '',
                'body' => $node->get('body')->value ?? '',
                'image' => !empty($node->get('field_news_image')->entity) ? 
                    \Drupal::service('file_url_generator')->generateAbsoluteString($node->get('field_news_image')->entity->getFileUri()) : '',
                'url' => $node->toUrl()->toString(),
            ];
            break; // Stop after finding the correct news
        }
    }
}
$variables['latest_event_content'] = [];
// Retrieve the node ID from the route
$id_event = \Drupal::routeMatch()->getParameter('id'); // Get the ID from the route
// Ensure ID is an integer
if (!is_numeric($id_event)) {
    \Drupal::logger('gen_pio')->debug('Invalid ID Event: @id', ['@id' => $id_event]);
    return; // Stop processing if the ID is invalid
}
// Debugging: Log the retrieved ID
//\Drupal::logger('gen_pio')->debug('Fixed Retrieved News ID: @id', ['@id' => $id]);
if (!empty($events_nids) && $id_event) {
    // Debugging: Check if ID exists in news_nids
    \Drupal::logger('gen_pio')->debug('Available News IDs: @ids', ['@ids' => implode(',', $events_nids)]);
    // Load the nodes
    $nodes_event = \Drupal\node\Entity\Node::loadMultiple($events_nids);
    foreach ($nodes_event as $nodes_event) {
        // Debugging: Log the current node ID
        \Drupal::logger('gen_pio')->debug('Checking Node ID: @node_id', ['@node_id' => $nodes_event->id()]);
        // Only process the node that matches the requested ID
        if ($nodes_event->id() == $id_event) {
           // \Drupal::logger('gen_pio')->debug('Matching News Found: @id', ['@id' => $id]);
            $variables['latest_event_content'][] = [
                'id' => $nodes_event->id(),
                'label' => $nodes_event->getTitle(),
                'date' => $nodes_event->get('field_events_date')->value ?? '',
                'body' => $nodes_event->get('body')->value ?? '',
                'image' => !empty($nodes_event->get('field_events_image')->entity) ? 
                    \Drupal::service('file_url_generator')->generateAbsoluteString($nodes_event->get('field_events_image')->entity->getFileUri()) : '',
                'url' => $nodes_event->toUrl()->toString(),
            ];
            break; // Stop after finding the correct news
        }
    }
}

// Debugging: Log final output
//\Drupal::logger('gen_pio')->debug('Final Latest News Content: @content', ['@content' => print_r($variables['latest_news_content'], TRUE)]);

    

}



?>

